{"version":3,"sources":["store/currentTodo.ts","store/loading.ts","store/index.ts","components/Loader/Loader.tsx","api.ts","types/TodoStatus.ts","components/TodoModal/TodoModal.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","defaultState","loading","rootReducer","combineReducers","currentTodoReducer","state","action","loadingReducer","selectors","store","createStore","composeWithDevTools","applyMiddleware","thunk","Loader","className","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoStatus","getUser","userId","TodoModal","selectedTodo","useState","user","setUser","dispatch","useDispatch","useEffect","a","id","onClick","title","completed","href","email","name","TodoList","todos","useSelector","selectedUserId","setSelectedUserId","map","classNames","handleSelectingTodo","TodoFilter","setSortType","setQuery","query","onChange","event","target","value","placeholder","style","pointerEvents","App","setTodos","visibleTodos","setVisibleTodos","ALL","sortType","loadTodos","loadedTodos","toUpdate","ACTIVE","filter","COMPLETED","includes","toLowerCase","sortTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bfcd3bcb.chunk.js","sourcesContent":["/* eslint-disable max-len */\nimport { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'SET_TODO',\n  todo: Todo,\n};\n\ntype DeleteTodoAction = {\n  type: 'DELETE_TODO',\n};\n\nexport type Action = SetTodoAction | DeleteTodoAction;\n\nexport const actions = {\n  setTodo: (todo: Todo): SetTodoAction => ({\n    type: 'SET_TODO',\n    todo,\n  }),\n\n  deleteTodo: (): DeleteTodoAction => ({\n    type: 'DELETE_TODO',\n  }),\n};\n\nconst defaultState = null;\n\nexport const currentTodoReducer = (state = defaultState, action: Action): Todo | null => {\n  switch (action.type) {\n    case 'SET_TODO':\n      return action.todo;\n    case 'DELETE_TODO':\n      return null;\n    default:\n      return state;\n  }\n};\n","type StartLoadingAction = {\n  type: 'START_LOADING',\n};\n\ntype FinishLoadingAction = {\n  type: 'FINISH_LOADING',\n};\n\ntype Action = StartLoadingAction | FinishLoadingAction;\n\nexport const actions = {\n  startLoading: (): StartLoadingAction => ({\n    type: 'START_LOADING',\n  }),\n\n  finishLoading: (): FinishLoadingAction => ({\n    type: 'FINISH_LOADING',\n  }),\n};\n\nconst defaultState = {\n  loading: true,\n};\n\nexport const loadingReducer = (state = defaultState, action: Action) => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return true;\n    case 'FINISH_LOADING':\n      return false;\n    default:\n      return state;\n  }\n};\n","import {\n  createStore, applyMiddleware, combineReducers,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Todo } from '../types/Todo';\nimport { currentTodoReducer } from './currentTodo';\nimport { loadingReducer } from './loading';\n\nconst rootReducer = combineReducers({\n  currentTodoReducer,\n  loadingReducer,\n});\n\ntype State = {\n  currentTodoReducer: Todo | null,\n  loadingReducer: boolean,\n};\n\nexport const selectors = {\n  isLoading: (state: State) => state.loadingReducer,\n  getTodo: (state: State) => state.currentTodoReducer,\n};\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL\n= 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum TodoStatus {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { actions } from '../../store/currentTodo';\n\ntype Props = {\n  selectedTodo: Todo,\n  userId: number,\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, userId }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loading = async () => {\n      setUser(await getUser(userId));\n    };\n\n    loading();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.deleteTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto: ${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectors } from '../../store';\nimport { actions } from '../../store/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { TodoModal } from '../TodoModal';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n  const selectedTodo = useSelector(selectors.getTodo);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n\n  const handleSelectingTodo = (todo: Todo, userId: number) => {\n    dispatch(actions.setTodo(todo));\n\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames(\n              { 'has-background-info-light': todo === selectedTodo },\n            )}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            {todo.completed ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleSelectingTodo(todo, todo.userId)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'far fa-eye',\n                    { 'fa-eye-slash': todo === selectedTodo },\n                  )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n\n        {selectedTodo && (\n          <TodoModal selectedTodo={selectedTodo} userId={selectedUserId} />\n        )}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { TodoStatus } from '../../types/TodoStatus';\n\ntype Props = {\n  setSortType: (status: TodoStatus) => void,\n  setQuery: (query: string) => void,\n  query: string,\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  { setSortType, setQuery, query },\n) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => setSortType(event.target.value as TodoStatus)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            setQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/TodoStatus';\nimport { selectors } from './store';\nimport { actions } from './store/loading';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const dispatch = useDispatch();\n  const loading = useSelector(selectors.isLoading);\n\n  const [sortType, setSortType] = useState<TodoStatus>(TodoStatus.ALL);\n\n  const loadTodos = async () => {\n    const loadedTodos = await getTodos();\n\n    setTodos(loadedTodos);\n    setVisibleTodos(loadedTodos);\n    dispatch(actions.finishLoading());\n  };\n\n  useEffect(() => {\n    loadTodos();\n    setVisibleTodos(todos);\n  }, []);\n\n  const sortTodos = () => {\n    let toUpdate = visibleTodos;\n\n    switch (sortType) {\n      case (TodoStatus.ACTIVE):\n        toUpdate = todos.filter(todo => !todo.completed);\n        break;\n      case (TodoStatus.COMPLETED):\n        toUpdate = todos.filter(todo => todo.completed);\n        break;\n      default:\n        toUpdate = todos;\n    }\n\n    if (query) {\n      toUpdate = toUpdate\n        .filter(todo => todo.title.includes(query.toLowerCase()));\n    }\n\n    setVisibleTodos(toUpdate);\n  };\n\n  useEffect(() => {\n    sortTodos();\n  }, [sortType, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setSortType={setSortType}\n                setQuery={setQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading ? (\n                <Loader />\n              ) : (\n                <TodoList todos={visibleTodos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}